'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.default = compile;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _handlebars = require('handlebars');

var _handlebars2 = _interopRequireDefault(_handlebars);

var _customError = require('./customError');

var _ressourceUtils = require('./ressource-utils');

var _helper = require('./helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function registerCustomHelpers(handlebarsEnv) {
	var helpersDirectory = 'helpers';
	var regex = /(.+)(.js)/; // only *.js files with at least one character filenames

	if ((0, _ressourceUtils.exists)(helpersDirectory)) {
		var allHelpers = []; // element := { modulename, funcname }
		(0, _ressourceUtils.listFiles)(helpersDirectory).forEach(function (filename) {
			var match = regex.exec(filename);

			if (match) {
				var modulename = match[1];
				var module = (0, _ressourceUtils.loadDynamicModule)(modulename, helpersDirectory);
				if (module instanceof Error) {
					throw module;
				}

				(0, _keys2.default)(module).forEach(function (funcname) {
					var newHelper = { modulename: modulename, funcname: funcname };

					allHelpers.forEach(function (cur) {
						if (cur.funcname === newHelper.funcname) {
							throw (0, _customError.HelperAlreadyDeclared)('Helper "' + newHelper.funcname + '" declared in "' + newHelper.modulename + '.js" already declared in "' + cur.modulename + '.js"');
						}
					});
					allHelpers.push(newHelper);

					handlebarsEnv.registerHelper(funcname, function () {
						var args = [].concat(Array.prototype.slice.call(arguments));
						args.pop(); // last argument contains an options object, we do not need it here
						return module[funcname].apply(module, (0, _toConsumableArray3.default)(args));
					});
				});
			}
		});
	}
}

/**
 * Calculates a meaningfully indented version of the
 * current context.
 */
function registerGlobalHelpers(handlebarsEnv) {
	handlebarsEnv.registerHelper('debugJson', function (context, options) {
		var pageData = context.data.root;
		var toReturn = '<pre>' + (0, _stringify2.default)(pageData, null, 2) + '</pre>';
		return new _handlebars2.default.SafeString(toReturn);
	});
}

function createHandlebarsEnv() {
	var handlebarsEnv = _handlebars2.default.create();

	registerGlobalHelpers(handlebarsEnv);
	registerCustomHelpers(handlebarsEnv);

	return handlebarsEnv;
}

// kein 'precompile' von Handlebars!
function prepareCompile(url, startDir, frontmatter) {
	var preparedUrl = (0, _ressourceUtils.convert)(url);
	var filename = _path2.default.basename(preparedUrl);
	var directory = _path2.default.join(startDir, _path2.default.dirname(preparedUrl));

	console.log('Going to compile file ' + filename + ' from directory ' + directory);

	if ((0, _ressourceUtils.exists)(directory) && (0, _ressourceUtils.contains)(directory, filename)) {

		var file = _fs2.default.readFileSync(_path2.default.join(directory, filename), 'utf8');
		var fileSplitted = file.split('---');

		var json = fileSplitted.length > 1 ? fileSplitted[0] : '{}';
		var hbs = fileSplitted.length > 1 ? fileSplitted[1] : fileSplitted[0];

		var frontmatterLocal = (0, _helper.parseJson)(json, filename);
		var page = (0, _assign2.default)({}, frontmatter.page, frontmatterLocal);
		var frontmatterCombined = (0, _assign2.default)({}, { page: page }, { global: frontmatter.global }, { request: frontmatter.request }, { session: frontmatter.session });

		console.log('Output for       : ' + url);
		console.log('Frontmatter JSON : ' + (0, _stringify2.default)(frontmatterLocal));
		console.log('Complete JSON    : ' + (0, _stringify2.default)(frontmatterCombined));
		console.log('\n');

		return { hbs: hbs, frontmatterCombined: frontmatterCombined };
	} else {
		throw (0, _customError.FileNotFoundError)('File ' + filename + ' not found in Directory ' + directory);
	}
}

function compile(url) {
	var frontmatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'pages';
	var contentHtml = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

	var _prepareCompile = prepareCompile(url, dir, frontmatter),
	    hbs = _prepareCompile.hbs,
	    frontmatterCombined = _prepareCompile.frontmatterCombined;

	var handlebarsEnv = createHandlebarsEnv();

	handlebarsEnv.registerHelper('content', function () {
		return new handlebarsEnv.SafeString(contentHtml);
	});

	handlebarsEnv.registerHelper('include', function (fname) {
		var html = compile(fname, frontmatterCombined, 'templates');
		return new handlebarsEnv.SafeString(html);
	});

	var templateName = '';
	if ('template' in frontmatterCombined['page']) {
		templateName = frontmatterCombined['page']['template'];
		delete frontmatterCombined['page']['template'];
	}
	var template = handlebarsEnv.compile(hbs);
	var htmlCompiled = template(frontmatterCombined);

	if (templateName !== '') {
		htmlCompiled = compile(templateName, frontmatterCombined, 'templates', htmlCompiled);
	}

	return htmlCompiled.length === 0 ? " " : htmlCompiled.trim();
}